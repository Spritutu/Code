/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ZipService_H
#define ZipService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Interface_types.h"

namespace ThriftModule {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ZipServiceIf {
 public:
  virtual ~ZipServiceIf() {}
  virtual void Zip() = 0;
};

class ZipServiceIfFactory {
 public:
  typedef ZipServiceIf Handler;

  virtual ~ZipServiceIfFactory() {}

  virtual ZipServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ZipServiceIf* /* handler */) = 0;
};

class ZipServiceIfSingletonFactory : virtual public ZipServiceIfFactory {
 public:
  ZipServiceIfSingletonFactory(const boost::shared_ptr<ZipServiceIf>& iface) : iface_(iface) {}
  virtual ~ZipServiceIfSingletonFactory() {}

  virtual ZipServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ZipServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ZipServiceIf> iface_;
};

class ZipServiceNull : virtual public ZipServiceIf {
 public:
  virtual ~ZipServiceNull() {}
  void Zip() {
    return;
  }
};


class ZipService_Zip_args {
 public:

  ZipService_Zip_args(const ZipService_Zip_args&);
  ZipService_Zip_args& operator=(const ZipService_Zip_args&);
  ZipService_Zip_args() {
  }

  virtual ~ZipService_Zip_args() throw();

  bool operator == (const ZipService_Zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ZipService_Zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZipService_Zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZipService_Zip_pargs {
 public:


  virtual ~ZipService_Zip_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZipService_Zip_result {
 public:

  ZipService_Zip_result(const ZipService_Zip_result&);
  ZipService_Zip_result& operator=(const ZipService_Zip_result&);
  ZipService_Zip_result() {
  }

  virtual ~ZipService_Zip_result() throw();

  bool operator == (const ZipService_Zip_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ZipService_Zip_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ZipService_Zip_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ZipService_Zip_presult {
 public:


  virtual ~ZipService_Zip_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ZipServiceClient : virtual public ZipServiceIf {
 public:
  ZipServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ZipServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Zip();
  void send_Zip();
  void recv_Zip();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ZipServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ZipServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ZipServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ZipServiceProcessor(boost::shared_ptr<ZipServiceIf> iface) :
    iface_(iface) {
    processMap_["Zip"] = &ZipServiceProcessor::process_Zip;
  }

  virtual ~ZipServiceProcessor() {}
};

class ZipServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ZipServiceProcessorFactory(const ::boost::shared_ptr< ZipServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ZipServiceIfFactory > handlerFactory_;
};

class ZipServiceMultiface : virtual public ZipServiceIf {
 public:
  ZipServiceMultiface(std::vector<boost::shared_ptr<ZipServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ZipServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ZipServiceIf> > ifaces_;
  ZipServiceMultiface() {}
  void add(boost::shared_ptr<ZipServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Zip() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Zip();
    }
    ifaces_[i]->Zip();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ZipServiceConcurrentClient : virtual public ZipServiceIf {
 public:
  ZipServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ZipServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Zip();
  int32_t send_Zip();
  void recv_Zip(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
